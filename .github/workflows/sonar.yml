name: Development (Sonar)
run-name: SecurityChecker, CodingStandards, UnitTests, Build and Deploy in dev mode
on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  security-checker:
    name: SecurityChecker
    runs-on: ubuntu-latest
    steps:
      - run: echo "SecurityChecker step"
  unit-test:
    needs: [ security-checker ]
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - run: echo "Unit tests step"
      #Check-out
      - uses: actions/checkout@v3
      #Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      #Set up Maven cache
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run unit tests
      - name: Run unit tests
        run: mvn -B test
  coding-standards:
    needs: [ unit-test ]
    name: CodingStandards (Sonar)
    runs-on: ubuntu-latest
    steps:
      - run: echo "CodingStandards step"
      #Check-out
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      #Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      #Set up SonarCloud cache
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      # Set Maven cache
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Analyze project with SonarCloud
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=MSPR2-Paye-ton-kawa_ms_clients
      #      #Analyze project with SonarCloud
      #      - name: Analyze with SonarCloud
      #        uses: SonarSource/sonarcloud-github-action@v2.2.0
      #        env:
      #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Optionally you can use the output from the Quality Gate in another step.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
  build:
    needs: [ coding-standards]
    name: Build with
    runs-on: ubuntu-latest
    steps:
      - run: echo "Build step"
  deploy:
    needs: [ build ]
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - run: echo "Unit tests step"
